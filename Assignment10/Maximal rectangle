class Solution {
    public int maximalRectangle(char[][] mat) {
        int maxsum=0;
        int row= mat.length;
        int col= mat[0].length;
        int[][] prev=new int[row][col];
        for(int j=0;j<col;j++){
            int sum=0;
            for(int i=0;i<row;i++){
                if(mat[i][j]=='1'){
                    sum+=1;
                    prev[i][j]=sum;
                }
                else{
                    sum=0;
                    prev[i][j]=0;
                }
            }
            for(int i=0;i<row;i++){
                maxsum=Math.max(maxsum,rect(prev[i]));
            }
        }
        return maxsum;
    }
    int rect(int[] prev){
        int n=prev.length;
        int ps[]=new int[n];
        int ns[] = new int[n];
        ArrayDeque<Integer> st= new ArrayDeque<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty()&&prev[st.peek()]>=prev[i]){
                st.pop();
            }
            if(st.isEmpty()){
                ps[i]=-1;
            }
            else{
                ps[i]=st.peek();
            }
            st.push(i);
        }
        st.clear();

        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty()&&prev[st.peek()]>=prev[i]){
                st.pop();
            }
            if(st.isEmpty()){
                ns[i]=n;
            }
            else{
                ns[i]=st.peek();
            }
            st.push(i);
        }
        int max=0;
        for(int i=0;i<n;i++){
            int curr=(ns[i]-ps[i]-1)*prev[i];
            max=Math.max(max,curr);
        }
        return max;
    }
}
